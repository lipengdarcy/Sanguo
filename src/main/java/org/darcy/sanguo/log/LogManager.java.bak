package sango.log;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.PropertyConfigurator;
import org.slf4j.Logger;

import sango.Configuration;
import sango.Platform;
import sango.account.Account;
import sango.awardcenter.Award;
import sango.coup.CoupRecord;
import sango.destiny.DestinyRecord;
import sango.divine.DivineRecord;
import sango.drop.Reward;
import sango.event.Event;
import sango.event.EventHandler;
import sango.event.EventType;
import sango.hero.Formation;
import sango.hero.Warrior;
import sango.item.Equipment;
import sango.item.Item;
import sango.item.ItemService;
import sango.item.Treasure;
import sango.mail.Mail;
import sango.map.MapTemplate;
import sango.map.StageTemplate;
import sango.pay.PayPull;
import sango.pay.Receipt;
import sango.player.Player;
import sango.player.PropertyType;
import sango.tactic.Tactic;
import sango.tactic.TacticRecord;
import sango.task.Task;
import sango.time.Crontab;
import sango.top.Top;
import sango.tower.TowerRecord;
import sango.union.League;
import sango.union.LeagueService;
import sango.worldcompetition.WorldCompetitionData;

public class LogManager implements EventHandler {
	
	public static final char CR = ',';
	
	private static HashMap<String,Log> logs = new HashMap<String, Log>();
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	
	public LogManager(){
		Platform.getEventManager().registerListener(this);
		new Crontab("0 0 0", EventType.TIME_NEW_DAY);
	}
	
	public void init(){
		try {
			String dir = System.getProperty("user.dir");
			PropertyConfigurator.configure(new FileInputStream(new File(dir,"log4j.properties")));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		logs.put(Log.RECORDIN, new LogOnce(Log.RECORDIN));
		logs.put(Log.RECORDOUT, new LogOnce(Log.RECORDOUT));
		
		logs.put(Log.WORLD, new Log(Log.WORLD));
		logs.put(Log.COMBAT, new Log(Log.COMBAT));
		logs.put(Log.WARN, new Log(Log.WARN));
		logs.put(Log.ERROR, new Log(Log.ERROR));
		logs.put(Log.SYSTEM, new Log(Log.SYSTEM));
		logs.put(Log.NET, new Log(Log.NET));
		
		logs.put(Log.LOGIN, new Log(Log.LOGIN));
		logs.put(Log.REGIST, new Log(Log.REGIST));
		logs.put(Log.LOGOUT, new Log(Log.LOGOUT));
		logs.put(Log.LEVELUP, new Log(Log.LEVELUP));
		logs.put(Log.RECRUIT, new Log(Log.RECRUIT));
		logs.put(Log.ACQUIRE, new Log(Log.ACQUIRE));
		logs.put(Log.COST, new Log(Log.COST));
		logs.put(Log.TASK, new Log(Log.TASK));
		logs.put(Log.GETAWARD, new Log(Log.GETAWARD));
		logs.put(Log.GETITEM, new Log(Log.GETITEM));
		logs.put(Log.REMOVEITEM, new Log(Log.REMOVEITEM));
		logs.put(Log.PVEFIGHT, new Log(Log.PVEFIGHT));
		logs.put(Log.TREASURE, new Log(Log.TREASURE));
		logs.put(Log.EQUIPMENT, new Log(Log.EQUIPMENT));
		logs.put(Log.WARRIOR, new Log(Log.WARRIOR));
		logs.put(Log.STAGE, new Log(Log.STAGE));
		logs.put(Log.FELLOW, new Log(Log.FELLOW));
		logs.put(Log.TACTIC, new Log(Log.TACTIC));
		logs.put(Log.DESTINY, new Log(Log.DESTINY));
		logs.put(Log.ARENA, new Log(Log.ARENA));
		logs.put(Log.COMPETITION, new Log(Log.COMPETITION));
		logs.put(Log.STAR, new Log(Log.STAR));
		logs.put(Log.TOWER, new Log(Log.TOWER));
		logs.put(Log.EQUIP, new Log(Log.EQUIP));
		logs.put(Log.DIVINE, new Log(Log.DIVINE));
		logs.put(Log.COUP, new Log(Log.COUP));
		logs.put(Log.BAN, new Log(Log.BAN));
		logs.put(Log.ONLINE, new Log(Log.ONLINE));
		logs.put(Log.CHARGE, new Log(Log.CHARGE));
		logs.put(Log.NEW_GUIDE, new Log(Log.NEW_GUIDE));
		logs.put(Log.MAIL, new Log(Log.MAIL));
		logs.put(Log.PAYCHECK, new Log(Log.PAYCHECK));
		logs.put(Log.LEAGUE, new Log(Log.LEAGUE));
		logs.put(Log.TRAIN, new Log(Log.TRAIN));
		logs.put(Log.INHERIT, new Log(Log.INHERIT));
		logs.put(Log.LEAGUEBOSS, new Log(Log.LEAGUEBOSS));
		logs.put(Log.PAYPUSH, new Log(Log.PAYPUSH));
		logs.put(Log.YYBJEWELS, new Log(Log.YYBJEWELS));
		logs.put(Log.GM_MAIL, new Log(Log.GM_MAIL));
	}
	
	public void removeLog(String type){
		logs.remove(type);
	}
	
	private Log getLog(String logtype){
		return logs.get(logtype);
	}
	
	
	
	public void logSystem(String message){
		Logger log = this.getLog(Log.SYSTEM).logger;
		log.warn(message);
	}
	
	
	
	public void logWarn(String warn){
		Logger log = this.getLog(Log.WARN).logger;		
		log.warn(warn);
	}
	
	public void logWarn(Throwable obj){
		Logger log = this.getLog(Log.WARN).logger;
		log.error("-------warn start------");
		log.error(obj.toString());
		for(StackTraceElement e: obj.getStackTrace()){
			log.warn(e.toString());
		}
		log.error("-------warn end------");
	}

	public void logError(String message){
		Logger log = this.getLog(Log.ERROR).logger;		
		log.error(message);
	}
	
	public void logError(Throwable obj){
		Logger log = this.getLog(Log.ERROR).logger;
		log.error("-------error start------");
		log.error(obj.toString());
		for(StackTraceElement e: obj.getStackTrace()){
			log.error(e.toString());
		}
		log.error("-------error end------");
	}
	
	public void logError(String message, Throwable obj){
		Logger log = this.getLog(Log.ERROR).logger;	
		log.error("-------error start------");
		log.error(message);
		for(StackTraceElement e: obj.getStackTrace()){
			log.error(e.toString());
		}
		log.error("-------error end------");
	}

	
	public void logWorld(Object obj){
		Logger log = this.getLog(Log.WORLD).logger;
		if(obj instanceof Exception){
			for(StackTraceElement e: ((Exception) obj).getStackTrace()){
				log.info(e.toString());
			}
		}else{
			log.info(obj.toString());
		}
	}
	
	public void logCombat(Object obj){
		Logger log = this.getLog(Log.COMBAT).logger;
		log.info(obj.toString());
	}
	
	public void logNet(String obj){
		Logger log = this.getLog(Log.NET).logger;
		log.info(obj.toString());
	}
	
	public void logRecordIn(Object obj){
		LogOnce log = (LogOnce) this.getLog(Log.RECORDIN);
		log.logCombat(obj.toString());
	}
	
	public void logRecordOut(Object obj){
		LogOnce log = (LogOnce) this.getLog(Log.RECORDOUT);
		log.logCombat(obj.toString());
	}
	
	
	public void logLogin(Player player){
		Logger log = this.getLog(Log.LOGIN).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.LOGIN);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(player.getSession().getIp());
		if(player.getSession().getAccount() == null) {
			sb.append(CR).append(Account.ACCOUNT_TYPE_GUEST);
		}else {
			sb.append(CR).append(player.getSession().getAccount().getChannelType());
		}
		log.info(sb.toString());
	}
	
	
	public void logLogout(Player player){
		Logger log = this.getLog(Log.LOGOUT).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.LOGOUT);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(player.getChannelType());
		sb.append(CR).append(this.sdf.format(new Date(player.getRegisterTime())));
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(player.getCharge());
		sb.append(CR).append(player.getJewels());
		sb.append(CR).append((System.currentTimeMillis()-player.getLastLogin().getTime())/1000);
		sb.append(CR).append(player.getVitality());
		sb.append(CR).append(player.getStamina());
		sb.append(CR).append(player.getMoney());
		sb.append(CR).append(player.getBtlCapability());
		sb.append(CR).append(Platform.getTopManager().getRank(Top.BTLCAP,player.getId()));
		sb.append(CR).append(player.getVip().level);
		log.info(sb.toString());
	}
	
	
	public void logRegist(Player player) {
		Logger log = this.getLog(Log.REGIST).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.REGIST);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(player.getAccountId());
		sb.append(CR).append(player.getName());
		sb.append(CR).append(player.getId());
		sb.append(CR).append(player.getSession().getIp());
		if(player.getSession().getAccount() == null) {
			sb.append(CR).append(Account.ACCOUNT_TYPE_GUEST);
		}else {
			sb.append(CR).append(player.getSession().getAccount().getChannelType());
		}	
		log.info(sb.toString());
	}
	
	
	public void logLevelUp(Player player, int level) {
		Logger log = this.getLog(Log.LEVELUP).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.LEVELUP);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(level);
		log.info(sb.toString());
	}
	
	
	public void logRecruit(Player player, String recruitType, String costType) {
		Logger log = this.getLog(Log.RECRUIT).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.RECRUIT);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(recruitType);
		sb.append(CR).append(costType);
		log.info(sb.toString());
	}
	
	
	public void logAcquire(Player player, String dropType, int acquire, int value, String type) {
		Logger log = this.getLog(Log.ACQUIRE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.ACQUIRE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(dropType);
		sb.append(CR).append(acquire);
		sb.append(CR).append(value);
		sb.append(CR).append(type);
		log.info(sb.toString());
	}
	
	
	public void logCost(Player player, String dropType, int cost, int value, String type) {
		Logger log = this.getLog(Log.COST).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.COST);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(dropType);
		sb.append(CR).append(cost);
		sb.append(CR).append(value);
		sb.append(CR).append(type);
		log.info(sb.toString());
	}
	
	
	public void logTask(Player player, Task task, String opt) {
		Logger log = this.getLog(Log.TASK).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.TASK);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(task.getId());
		sb.append(CR).append(task.getTemplate().name);
		sb.append(CR).append(opt);
		log.info(sb.toString());
	}
	
	
	public void logGetAward(int playerId, Award award) {
		Logger log = this.getLog(Log.GETAWARD).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.GETAWARD);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(playerId);
		sb.append(CR).append(award.getId());
		sb.append(CR).append(award.getOptType());
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(award.getTime());
		sb.append(CR).append(this.sdf.format(cal.getTime()));
		log.info(sb.toString());
	}
	
	
	public void logRemoveItem(Player player, int templateId, String name, int id, int count, int total, String optType) {
		Logger log = this.getLog(Log.REMOVEITEM).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.REMOVEITEM);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(templateId);
		sb.append(CR).append(name);
		sb.append(CR).append(count);
		sb.append(CR).append(total);
		sb.append(CR).append(id);
		sb.append(CR).append(optType);
		log.info(sb.toString());
	}
	
	
	public void logGetItem(Player player, Item item, int count, int total, String optType) {
		Logger log = this.getLog(Log.GETITEM).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.GETITEM);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(item.getTemplateId());
		sb.append(CR).append(item.getName());
		sb.append(CR).append(count);
		sb.append(CR).append(total);
		sb.append(CR).append(item.getId());
		sb.append(CR).append(optType);
		log.info(sb.toString());
	}
	
	
	public void logPveFight(Player player, MapTemplate mt, StageTemplate st, boolean result, int count, int surplus) {
		Logger log = this.getLog(Log.PVEFIGHT).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.PVEFIGHT);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(mt.id);
		sb.append(CR).append(mt.name);
		sb.append(CR).append(st.id);
		sb.append(CR).append(st.name);
		sb.append(CR).append(result);
		sb.append(CR).append(count);
		sb.append(CR).append(surplus);
		log.info(sb.toString());
	}
	
	
	public void logTreasure(Player player, Treasure t, String opt, int value) {
		Logger log = this.getLog(Log.TREASURE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.TREASURE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(this.getItemInfo(t));
		sb.append(CR).append(t.getExp());
		sb.append(CR).append(t.getEnhanceLevel());
		sb.append(CR).append(opt);
		sb.append(CR).append(value);
		log.info(sb.toString());
	}
	
	
	public void logEquipment(Player player, Equipment e, String opt, int value) {
		Logger log = this.getLog(Log.EQUIPMENT).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.EQUIPMENT);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(this.getItemInfo(e));
		sb.append(CR).append(e.getPolishCount());
		sb.append(CR).append(e.getForgeLevel());
		sb.append(CR).append(opt);
		sb.append(CR).append(value);
		log.info(sb.toString());
	}
	
	
	public void logWarrior(Player player, Warrior w, String opt, int value) {
		Logger log = this.getLog(Log.WARRIOR).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.WARRIOR);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(this.getItemInfo(w));
		sb.append(CR).append(w.getAdvanceLevel());
		sb.append(CR).append(opt);
		sb.append(CR).append(value);
		log.info(sb.toString());
	}
	
	
	public void logStage(Player player, int onId, int downId) {
		Logger log = this.getLog(Log.STAGE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.STAGE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(onId);
		sb.append(CR).append(downId);
		Warrior[] ws = player.getWarriors().getStands();
		for (int i = 0; i < ws.length; i++) {
			Warrior w = ws[i];
			if(w == null) {
				sb.append(CR).append(-1);
				sb.append(CR).append("null");
			}else {
				sb.append(CR).append(w.getId());
				sb.append(CR).append(w.getName());
			}
		}
		log.info(sb.toString());
	}
	
	
	public void logFellow(Player player, int onId, int downId) {
		Logger log = this.getLog(Log.FELLOW).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.FELLOW);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(onId);
		sb.append(CR).append(downId);
		Map<Integer, Warrior> map = player.getWarriors().getFriends();
		for (int i = 0; i < Formation.openFriendByLevel.size(); i++) {
			int index = i+1;
			Warrior w = map.get(index);
			if(w == null) {
				sb.append(CR).append(-1);
				sb.append(CR).append("null");
			}else {
				sb.append(CR).append(w.getId());
				sb.append(CR).append(w.getName());
			}
		}
		log.info(sb.toString());
	}
	
	
	public void logTactic(Player player, String opt) {
		Logger log = this.getLog(Log.TACTIC).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.TACTIC);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		TacticRecord tr = player.getTacticRecord();
		List<Tactic> list = new ArrayList<Tactic>(tr.getTactics().values());
		for (int i = 0; i < TacticRecord.MAX_TACTIC; i++) {
			if(i >= list.size()) {
				sb.append(CR).append("null");
				sb.append(CR).append(-1);
			}else {
				Tactic t = list.get(i);
				sb.append(CR).append(t.getTemplate().name);
				sb.append(CR).append(t.getLevel());
			}
		}
		sb.append(CR).append(opt);
		sb.append(CR).append(tr.getSurplusPoint());
		sb.append(CR).append(tr.getSelectTactic() == null ? null : tr.getSelectTactic().getTemplate().name);
		log.info(sb.toString());
	}
	
	
	public void logDestiny(Player player, int cost) {
		Logger log = this.getLog(Log.DESTINY).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.DESTINY);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		DestinyRecord dr = player.getDestinyRecord();
		sb.append(CR).append(dr.getCurrBreakId());
		sb.append(CR).append(dr.getCurrDestinyId());
		sb.append(CR).append(dr.getLeftStars());
		sb.append(CR).append(cost);
		log.info(sb.toString());
	}
	
	
	public void logArena(Player player, boolean isChallenge, Player rival, boolean isWin) {
		Logger log = this.getLog(Log.ARENA).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.ARENA);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(isChallenge);
		sb.append(CR).append(rival.getId());
		sb.append(CR).append(rival.getName());
		sb.append(CR).append(isWin);
		sb.append(CR).append(player.getArena().getRank());
		sb.append(CR).append(rival.getArena().getRank());
		log.info(sb.toString());
	}
	
	
	public void logCompetition(Player player, boolean isChallenge, Player rival, boolean isWin) {
		Logger log = this.getLog(Log.COMPETITION).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.COMPETITION);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(isChallenge);
		sb.append(CR).append(rival.getId());
		sb.append(CR).append(rival.getName());
		sb.append(CR).append(isWin);
		sb.append(CR).append(player.getWorldCompetition().getScore());
		sb.append(CR).append(player.getWorldCompetition().getRank());
		sb.append(CR).append(player.getPool().getInt(PropertyType.WORLD_COMPETITION_COUNT, WorldCompetitionData.DAY_COUNT));
		log.info(sb.toString());
	}
	
	
	public void logStar(Player player, int heroId, int itemId, int addExp, boolean isCrit) {
		Logger log = this.getLog(Log.STAR).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.STAR);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(this.getStarInfo(player, heroId));
		sb.append(CR).append(itemId);
		sb.append(CR).append(ItemService.getItemTemplate(itemId).name);
		sb.append(CR).append(addExp);
		sb.append(CR).append(isCrit);
		log.info(sb.toString());
	}
	
	
	public void logTower(Player player, String opt) {
		Logger log = this.getLog(Log.TOWER).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.TOWER);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		TowerRecord tr = player.getTowerRecord();
		sb.append(CR).append(tr.getMaxLevel());
		sb.append(CR).append(tr.getCurrentLevel());
		sb.append(CR).append(tr.getLeftChallengeTimes());
		sb.append(CR).append(tr.getLeftFreeResetTimes());
		sb.append(CR).append(opt);
		log.info(sb.toString());
	}
	
	
	public void logEquip(Player player, Item item, Warrior w, String opt) {
		Logger log = this.getLog(Log.EQUIP).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.EQUIP);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(this.getItemInfo(item));
		sb.append(CR).append(opt);
		sb.append(CR).append(w.getTemplateId());
		sb.append(CR).append(w.getId());
		sb.append(CR).append(w.getName());
		log.info(sb.toString());
	}
	
	
	public void logDivine(Player player, String opt) {
		Logger log = this.getLog(Log.DIVINE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.DIVINE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		DivineRecord dr = player.getDivineRecord();
		sb.append(CR).append(dr.getLeftDivineTimes());
		sb.append(CR).append(dr.getTotalScores());
		sb.append(CR).append(-1);
		sb.append(CR).append(opt);
		log.info(sb.toString());
	}
	
	
	public void logCoup(Player player, String opt) {
		Logger log = this.getLog(Log.COUP).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.COUP);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		CoupRecord cr = player.getCoupRecord();
		for (Integer level : cr.getCoups()) {
			sb.append(CR).append(level);
		}
		sb.append(CR).append(-1);
		sb.append(CR).append(opt);
		log.info(sb.toString());
	}
	
	
	
	public void logBan(String type, String key, long start, int time, String reason) {
		Logger log = this.getLog(Log.BAN).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.BAN);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(type);
		sb.append(CR).append(key);
		if(start > 0) {
			sb.append(CR).append(this.sdf.format(new Date(start)));
		}else {
			sb.append(CR).append(start);
		}
		sb.append(CR).append(time);
		sb.append(CR).append(reason);
		log.info(sb.toString());
	}
	
	
	public void logOnline(int count) {
		Logger log = this.getLog(Log.ONLINE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.ONLINE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(count);
		log.info(sb.toString());
	}
	
	
	public void logCharge(Player player, Receipt r) {
		Logger log = this.getLog(Log.CHARGE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.CHARGE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(r.getChannel());
		sb.append(CR).append(r.getOrderId());
		sb.append(CR).append(r.getGoodsId());
		sb.append(CR).append(r.getCoGoodsId());
		sb.append(CR).append(r.getPrice());
		if(player.getSession() != null){
			sb.append(CR).append(player.getSession().getIp());
		}else{
			sb.append(CR).append("null");
		}
		log.info(sb.toString());
	}
	
	
	public void logGuide(Player player, String guide) {
		Logger log = this.getLog(Log.NEW_GUIDE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.NEW_GUIDE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(guide);
		log.info(sb.toString());
	}
	
	
	public void logMail(Mail m) {
		Logger log = this.getLog(Log.MAIL).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.MAIL);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(m.getTargetId());
		sb.append(CR).append(m.getType());
		sb.append(CR).append(sdf.format(m.getSendTime()));
		sb.append(CR).append(m.getSourceId());
		sb.append(CR).append(m.getTitle());
		String attachment = "无";
		if(m.getAttachment() != null) {
			StringBuilder sb2 = new StringBuilder();
			for (Reward r : m.getAttachment().getRewards()) {
				sb2.append(r).append("|");
			}
			attachment = sb2.toString();
			if(attachment.length() > 0) {
				attachment = attachment.substring(0, attachment.length() - 1);
			}
		}
		sb.append(CR).append(attachment);
		log.info(sb.toString());
	}
	
	
	public void logPayCheck(Player player, String orderId, List<String> params) {
		Logger log = this.getLog(Log.PAYCHECK).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.PAYCHECK);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(orderId == null ? "null" : orderId);
		if(params != null) {
			for (String param : params) {
				sb.append(CR).append(param);
			}
		}else {
			sb.append(CR).append("null");
		}
		log.info(sb.toString());
	}
	
	public void logPayPush(PayPull pull) {
		Logger log = this.getLog(Log.PAYPUSH).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.PAYPUSH);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(pull.getPlayerId())

		.append(CR).append(pull.getNumber())
		.append(CR).append(pull.getOrderId())
		.append(CR).append(pull.getChannel());
		log.info(sb.toString());
	}
	
	
	public void logLeague(League l, String opt, int playerId) {
		Logger log = this.getLog(Log.LEAGUE).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.LEAGUE);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getLeagueInfo(l));
		sb.append(CR).append(opt);
		sb.append(CR).append(playerId);
		log.info(sb.toString());
	}
	
	
	public void logTrain(Player player, int heroId, int index, int cost) {
		Logger log = this.getLog(Log.TRAIN).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.TRAIN);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(this.getStarInfo(player, heroId));
		String trainItem = "None";
		switch (index) {
		case 0:
			trainItem = "HP";
			break;
		case 1:
			trainItem = "Attack";
			break;
		case 2:
			trainItem = "PhysicsDefense";
			break;
		case 3:
			trainItem = "MagicDefense";
			break;
		default:
			break;
		}
		
		sb.append(CR).append(trainItem);
		sb.append(CR).append(player.getStarRecord().getTrainLevel(heroId)[index]);
		sb.append(CR).append(cost);
		log.info(sb.toString());
	}
	
	
	public void logInherit(Player player, int srcId, int objId) {
		Logger log = this.getLog(Log.INHERIT).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.INHERIT);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(this.getStarInfo(player, srcId));
		sb.append(this.getStarInfo(player, objId));
		log.info(sb.toString());
	}
	
	
	public void logLeagueBoss(Player player, int damage) {
		Logger log = this.getLog(Log.LEAGUEBOSS).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.LEAGUEBOSS);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		League l = Platform.getLeagueManager().getLeagueById(player.getUnion().getLeagueId());
		sb.append(CR).append(l.getId());
		sb.append(CR).append(l.getName());
		sb.append(CR).append(l.getLevel());
		sb.append(this.getLeagueBossInfo(l));
		sb.append(CR).append(damage);
		sb.append(CR).append(player.getUnion().getBossSurplusNum());
		log.info(sb.toString());
	}
	
	
	public String getPlayerInfo(Player player) {
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(player.getAccountId());
		sb.append(CR).append(player.getName());
		sb.append(CR).append(player.getId());
		sb.append(CR).append(player.getLevel());
		return sb.toString();
	}
	
	
	public void logYybJewels(String accountId,String name,int id,int level, int optNum, int gameAmount, int yybOptNum, int yybAmount,String optType) {
		Logger log = this.getLog(Log.YYBJEWELS).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.YYBJEWELS);
		sb.append(CR).append(Configuration.serverId);
		sb.append(CR).append(accountId);
		sb.append(CR).append(name);
		sb.append(CR).append(id);
		sb.append(CR).append(level);
		sb.append(CR).append(optNum);
		sb.append(CR).append(gameAmount);
		sb.append(CR).append(yybOptNum);
		sb.append(CR).append(yybAmount);
		sb.append(CR).append(optType);
		log.info(sb.toString());
	}
	
	
	public String getItemInfo(Item i) {
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(i.getTemplateId());
		sb.append(CR).append(i.getId());
		sb.append(CR).append(i.getName());
		sb.append(CR).append(i.getLevel());
		return sb.toString();
	}
	
	
	public String getLeagueInfo(League l) {
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(l.getId());
		sb.append(CR).append(l.getName());
		sb.append(CR).append(l.getLevel());
		sb.append(CR).append(l.getRank());
		sb.append(CR).append(l.getCostBuildValue());
		sb.append(CR).append(l.getBuildValue());
		sb.append(CR).append(l.getLeader());
		sb.append(CR).append(l.getInfo().getMembers().size());
		return sb.toString();
	}
	
	
	public String getLeagueBossInfo(League l) {
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(l.getBossFacilityLevel());
		sb.append(CR).append(LeagueService.getBossBuff(l.getBossFacilityLevel()));
		sb.append(CR).append(l.getInfo().getBoss().getLevel());
		return sb.toString();
	}
	
	
	public String getStarInfo(Player p, int heroId) {
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(heroId);
		sb.append(CR).append(ItemService.getItemTemplate(heroId).name);
		sb.append(CR).append(p.getStarRecord().getLevel(heroId));
		sb.append(CR).append(p.getStarRecord().getExp(heroId));
		return sb.toString();
	}
	
	
	public void logGm(Player player, String content) {
		Logger log = this.getLog(Log.GM_MAIL).logger;
		StringBuffer sb = new StringBuffer();
		sb.append(CR).append(Log.GM_MAIL);
		sb.append(CR).append(Configuration.serverId);
		sb.append(this.getPlayerInfo(player));
		sb.append(CR).append(player.getVip().level);
		sb.append(CR).append(content);
		log.info(sb.toString());
	}
	

	@Override
	public int[] getEventCodes() {
		return new int[]{EventType.TIME_EVERY_HOUR};
	}

	@Override
	public void handleEvent(Event event) {
		if(event.type == EventType.TIME_EVERY_HOUR){
			for(Log log : logs.values()){
				log.flush();
			}
		}
	}
}
